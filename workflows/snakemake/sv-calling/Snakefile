#
# This workflow executes SV callers on tumor-normal sample pairs.
#

from csv import DictReader

shell.executable("/bin/bash")
configfile: "config.yaml"

callers = config["sv_callers"].keys()
#callers = ["manta"]

def get_filext(fmt):
    """Get file extension(s) given file type/format:
        ['fasta', 'fasta_idx', 'bam', 'bam_idx']
    """
    assert fmt in config["file_exts"].keys(), \
        "Unknown input file format '{}'.".format(fmt.lower())
    return config["file_exts"][fmt]

def get_fasta():
    """Get reference genome in FASTA.
    """
    return config["genome_path"] + get_filext("fasta")

def get_faidx():
    """Get FASTA index files generated by faidx and bwa tools.
    """
    return [config["genome_path"] + fext for fext in get_filext("fasta_idx")]

def get_outdir(caller):
    """Get the caller's output directory relative to SAMPLE_DIR.
    """
    return config["sv_callers"][caller]["outdir"]

def get_nthreads(caller):
    """Get the number of threads to be used by a caller.
    """
    return config["sv_callers"][caller]["threads"]

def get_maxmem(caller):
    """Get the amount of memory to be allocated (MB) for a caller.
    """
    return config["sv_callers"][caller]["memory"]

def collect_logs(callers):
    """Generate (dummy) logs for all sample pairs to drive the workflow.
    """
    with open(config["samples"], 'r') as fin:
        reader = DictReader(fin)
        return ["{sampledir}/{caller}/{tumor}-{normal}.log" \
            .format(sampledir=r["SAMPLE_DIR"], caller=get_outdir(c), \
                tumor=r["TUMOR"], normal=r["NORMAL"]) for r in reader \
                    for c in callers]

localrules: all

rule all:
    input:
        collect_logs(callers)

include: "rules/manta.smk"
include: "rules/delly.smk"
include: "rules/lumpy.smk"
include: "rules/gridss.smk"
