#
# This workflow executes SV callers on tumor-normal sample pairs.
#

import csv

shell.executable("/bin/bash")
configfile: "config.yaml"

CALLERS = config["sv_callers"].keys()
#CALLERS = ["manta"]

def get_outdir(caller):
    """Get the output directory for a caller."""
    return config["sv_callers"][caller]["outdir"]

def get_nthreads(caller):
    """Get the number of threads to be used by a caller."""
    return config["sv_callers"][caller]["threads"]

def get_maxmem(caller):
    """Get the amount of memory to be allocated (MB) for a caller."""
    return config["sv_callers"][caller]["memory"]

def collect_logs(callers):
    with open(config["samples"], 'r') as fin:
        reader = csv.DictReader(fin)
        return ["{dir}/{caller}/{tumor}-{normal}.log".format(dir=r["dir"], \
            caller=get_outdir(c), tumor=r["tumor"], \
                normal=r["normal"]) for r in reader for c in callers]

localrules: all

rule all:
    input: collect_logs(CALLERS)

include: "rules/manta.smk"
include: "rules/delly.smk"
include: "rules/lumpy.smk"
include: "rules/gridss.smk"
